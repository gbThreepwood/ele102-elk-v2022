.. ELE102_documentation documentation master file, created by
   sphinx-quickstart on Mon Oct 14 13:19:05 2019.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to ELE102 Microcontroller course!
============================================

On this page we will publish new lecture notes every week, as the course is progressing. The lecture notes will contain the curriculum that you need to know for the exam, as well as some additional material for those of you who are eager for more in depth knowledge.

.. toctree::
   :maxdepth: 2
   :caption: Lessons:
 
   Introduction <texts/Lessons/L0_Introduction_elk.rst>
   Software and hardware preparations <texts/Lessons/software_hardware_preparations.rst>
   Lesson 1a: What is a Microcontroller <texts/Lessons/L1_UC_intro.rst>
   Lesson 1b: Introduction to Arduino <texts/Lessons/L2_Arduino_intro.rst>
   Lesson 2: Digital I/O, and serial output <texts/Lessons/L3_digital_io_serial_o.rst>
..
   Introduction <texts/Lessons/L0_Introduction.rst>

 ..
   Lesson 3: Hands on Activities <texts/Lessons/L3_hands_on_act.rst>
   Lesson 4: Digital-Analog-Time <texts/Lessons/L4_digital_analog_time.rst>
   Lesson 5: Conditionals - Functions <texts/Lessons/L5_edge_conditional_func.rst>
   Lesson 6.1: ADC - PWM - Interrupt <texts/Lessons/L6_interrupt_adc_dac.rst>
   Lesson 7: Repetition <texts/Lessons/L7_repetition.rst>
   Lesson 8: Motor Drive <texts/Lessons/L8_motor_drive.rst>
   Lesson 9.1: LC-Display <texts/Lessons/LC_display.rst>
   Lesson 9.2 Communication Protocols <texts/Lessons/L9_communication.rst>
   Lesson 10: Real-Time Clock <texts/Lessons/L10_rtc.rst>
   Lesson 11: Visual Studio and Arduino <texts/Lessons/L11_VS_arduino.rst>
   Lesson 12: Microcontroller Architecture <texts/Lessons/L12_UC_architecture.rst>
   Lesson 13: Project - Introduction <texts/Lessons/RC_car.rst>
   Lesson X.1 Interrupts <texts/Lessons/interrupts.rst>
   Lesson X.2 Functions <texts/Lessons/functions.rst>
   Lesson X.3 Low power operation <texts/Lessons/low_power_operation.rst>
   Lesson X.4 Infrared remote <texts/Lessons/ir_communication.rst>
   Lesson X.5 Stacks, Queues, Lists <texts/Lessons/stacks_queues_lists.rst>
   Lesson X.5 Course summary <texts/Lessons/course_summary.rst>
   State machine tutorial <texts/Appendices/state_machine_tutorial.rst>
   Abstract data types <texts/Appendices/abstract_data_types.rst>
   Operating system <texts/Appendices/operating_system.rst>
   Additional Chapters <texts/Appendices/Additionals.rst>
   Appendix A1: Development environment  <texts/Appendices/A1_development_environment.rst>
   Appendix A3: Unit testing <texts/Appendices/A3_unit_testing.rst>
   Appendix A4: Digital signal processing <texts/Appendices/A4_digital_signal_processing.rst>
   Appendix A5: Fixed point numbers <texts/Appendices/A5_fixed_point_numbers.rst>
   Appendix A6: Microcontroller memory <texts/Appendices/A6_microcontroller_memory.rst>
   Appendix A7: C introduction <texts/Appendices/A7_introduction_to_c_programming.rst>

.. These where duplicates
   Lesson 14: Project - Communication <texts/Lessons/RC_car.rst>
   Lesson 15: Project - BringUp <texts/Lessons/RC_car.rst>
   Lesson 16: Project - RACE <texts/Lessons/RC_car.rst>
   Lesson 13: Data Structures <texts/Lessons/stacks_queues_lists.rst>

.. 
   .. note::
   Even weeks on tuesdays, odd weeks on wednesdays until week 13. Then, vice versa.

.. Old plan with maxdepth 4
   Lesson 1: Microcontroller History and Types <texts/Lessons/L1_uc_history.rst>
   Lesson 2: Microcontroller Hardware <texts/Lessons/L2_uc_hw.rst>
   Lesson 3: Introduction to Arduino <texts/Lessons/L3_Arduino_intro.rst>
   Lesson 4: Variables - Sensors - Conditionals <texts/Lessons/L4_variable_sensor_conditional.rst>
   Lesson 5: Functions <texts/Lessons/L5_functions.rst>
   Lesson 6: Pointers - Arrays - Interrupts <texts/Lessons/L6_pointer_array_interrupt.rst>
   Lesson 7: Analog to Digital / Digital to Analog Conversion <texts/Lessons/L7_adc_dac.rst>
   Lesson 8: Pulse Width Modulation <texts/Lessons/L8_pwm.rst>
   Lesson 9: Stacks - Queues - Linked Lists <texts/Lessons/L9_stack_queue_linkedlist.rst>
   Lesson 10: Look-up Tables <texts/Lessons/L10_lookup_table.rst>
   Lesson 11: Communication Protocols <texts/Lessons/L11_communication.rst>
   Lesson 12: Wireless Communication With ESP8266 <texts/Lessons/L12_wifi.rst>
   Lesson 13: Visual Studio and Arduino <texts/Lessons/L13_VS_arduino.rst>
   Lesson 14: RC Car (Bluetooth or Joystick) <texts/Lessons/L14_RC_car.rst>


You need to have:
==================

For the microcontroller part of ELE102 you will be needing some hardware, as well as some software.

* `Arduino Starter Kit <https://www.kjell.com/no/produkter/elektro-og-verktoy/utviklerkit/arduino/utviklingskort/arduino-startpakke-p87875>`_

* `Arduino Software <https://www.arduino.cc/en/main/software>`_

* `PlatformIO <https://platformio.org/platformio-ide>`_

..
   .. note::
   Depending of the class level, I will provide (*or you can buy if you will*) some other equipments for more serious and fun stuff!




..
    RTC - Real Time Clock - why do we need it
    https://howtomechatronics.com/tutorials/arduino/arduino-ds3231-real-time-clock-tutorial/

    Encoder: `rotary1 <https://howtomechatronics.com/tutorials/arduino/rotary-encoder-works-use-arduino/>`_ `rotary2 <https://www.electroschematics.com/rotary-encoder-arduino/>`_ `absolute PWM/I2C/SPI <https://forum.arduino.cc/index.php?topic=318110.0>`_


    Relay: Button press rotates a motor via relay. cool - and read from encoder?




    https://opensource.com/article/19/11/document-python-sphinx


..    
   .. toctree::
      :maxdepth: 2
      :caption: Appendices:


       State machines <texts/Appendices/A2_state_machines.rst>
       Memory technology <texts/Appendices/memory_technology.rst>
       Operating system <texts/Appendices/operating_system.rst>
       Advanced data structures <texts/Appendices/advanced_data_structures.rst>
       Additional Chapters <texts/Appendices/Additionals.rst>

.. Comment out for now


