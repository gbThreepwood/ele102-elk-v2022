.. _L9_communication:

..  .. note:: *11/03/2020 - 195mins*

        **Aim:**

        - I2C, SPI, UART/USART basics
        - they are mostly SoC protocols, low range
        - mention long range ones like RF, Ethernet etc but very basic.
        - why do we need a communication protocol?
        - Teach how to read a Datasheet 
            - IMU
            - NRF
            - MA702
            - Atmega328P
        - you can connect even 2 arduinos !


        **Materials:**

        - Arduino Board
        - Button
        - Cables
        - Breadboard
        - Potentiometer
        - Resistors
        - LED
        - MPU6050
        - NRF24L01 x 2
        - OLED



        **Code:**

        - Ex: NRF LED on/off (connected via SPI)
        - Hw: provide MPU6050 psudo code, make them plot acceleration

.. role:: ccode(code)
        :language: c

*************************************
Communication Protocols
*************************************

A communication protocol is a system of rules governing how two entities are to communicate with each other. Often it is usefull to separate the protocol into various layers, governing different aspects of the communication. Some layers may be general in nature, and applicable to many systems, while others may be very application specific. 

    Why do we need ports?
    *There was a dark era before some protocols are decided...*

    .. image:: ../../fig/port_fuck.jpeg
            :alt: To avoid from mess
            :scale: 100
            :align: center



Arduino Control via C# application (UART)
=========================================

In this lesson we will go through the design of a application that allows us to communicate between a desktop application written in C#, and a Arduino application written in C/C++. The communication link will be using the UART, but with some additional higher level application specific protocol layers.

Designing a simple communication protocol on top of UART
--------------------------------------------------------

Among the low level methods that are available to us are `Serial.write()`, and `Serial.read()`. The methods have the ability to send and receive one byte respectively. They do hovever not put any constraints on what the bytes are supposed to represent. The binary value 0b01001011 could represent a uppercase "K", as it does in ASCII, but it could also be a command to turn on a LED, or read a analog input. It is up to the designer to decide.

Even though you are free to do as you please, there are some approaches that are considered good practice, and that often lead to a more reliable communication system.

The following listing is one typical organisation of the data packet: 

* Start flag (single constant byte signifying start of transmission)
* Command byte (one or more bytes that informs the receiver on what the data represents)
* Length byte (the number of data bytes, or possibly the total number of bytes)
* Data byte (the actual data to transfer)
* Checksum or CRC (data used to verify the integrity of the transmitted data)
* End flag (single constant byte signifying end of transmission)

For fixed lengt data packages the length byte is not needed. In simple applications the checksum is often omitted, and possibly also the start and end flags.

For advanced applications there is a possible issue that the start, and end flags could appear as part of the data bytes. If each byte of the data could be anything, that means it could also be the flags no matter which value you choose to use. The flags are introduced to increase reliability, and this benefit is compromized if you do not reset the reception each time you receive a start flag. In order to overcome this issue one may use various forms of byte stuffing.


For production code it is recommended to at least use the following organisation of the data even for simple applications:

* Start flag (single constant byte signifying start of transmission)
* Command byte (one or more bytes that informs the receiver on what the data represents)
* Data byte (the actual data to transfer)
* End flag (single constant byte signifying end of transmission)

In the following examples we will try to start of even simpler however.


Consistent Overhead Byte Stuffing (COBS)
-----------------------------------------

.. note:: Byte stuffing is a advanced topic, and will not be covered as part of the course. It is here for the students that are particulary curious.

https://en.wikipedia.org/wiki/Consistent_Overhead_Byte_Stuffing


Using the serial port in C#
===========================

Before we go into the details of how to use the serial port, we should first try to understand the basic concept of delegates, and events.

Delegates
--------------------

A delegate in C# is a variable that holds a reference to a method. This is similar to the function pointer concept in C.

Events
-------

A event could be any occurrence of something. The event system in C# is used to notify one part of the software about something that has happened in a different part of the software. This could for instance be a user pressing a button on the keyboard, or mouse, or it could be data received on the serial port.

The event system works by the publisher-subscriber model. A publisher allows one or more subscribers to subscribe to the available events, when a event is raised, a method in the subscriber is called.

The subscribers are added to the publisher by assigning methods to a delegate variable in the publisher.

.. code-block:: c

  using System;
  
  namespace EventsDelegatesTest
  {
      class MainClass
      {
          public static void Main(string[] args)
          {
              var video = new Video() { Title = "Back to the future" };
              VideoEncoder videoEncoder = new VideoEncoder();
              var smsServie = new SMS();
  
              videoEncoder.VideoEncoded += smsServie.OnVideoEncoded;
              videoEncoder.VideoEncodingStarted += smsServie.OnStartEncoding;
  
              videoEncoder.Encode(video);
              Console.WriteLine("Programmet er ferdig.");
          }
      }
  
  }



.. code-block:: c

  using System;
  
  namespace EventsDelegatesTest
  {
      public class VideoEventArgs : EventArgs
      {
          public Video Video { get; set; }
      }
      public class VideoEncoder
      {
          public delegate void VideoEncodedEventHandler(object source, VideoEventArgs args);
          public delegate void VideoEncodingStartedHandler(object source, EventArgs args);
  
          public event VideoEncodedEventHandler VideoEncoded;
          public event VideoEncodingStartedHandler VideoEncodingStarted;
  
          public void Encode(Video video)
          {
              OnVideoEncodingStarted();
  
              Console.WriteLine("Enkodar video..");
  
              OnVideoEncoded(video);
          }
  
          protected virtual void OnVideoEncoded(Video video)
          {
              if (VideoEncoded != null)
              {
                  VideoEncoded(this, new VideoEventArgs() { Video = video });
              }
          }
          protected virtual void OnVideoEncodingStarted()
          {
              if(VideoEncodingStarted != null)
              {
                  VideoEncodingStarted(this, EventArgs.Empty);
              }
          }
      }
  }

.. code-block:: c
  
  using System;
  namespace EventsDelegatesTest
  {
      public class SMS
      {
          public void OnStartEncoding(object source, EventArgs e)
          {
              Console.Write("Kodinga har starta.");
          }
          public void OnVideoEncoded(object source, EventArgs e)
          {
              Console.WriteLine("Sender SMS...");
          }
      }
  }


Using the serial port in C# (System.IO.Ports)
---------------------------------------------

When reading the serial port you have several options. You could use a blocking call that blocks until data is available on the serial port, or you could poll the serial port library to check if data is available. Finally you could register a event handler that is called when data is available.


Simple example
==============

In this example we wil create a application to control an LED, and read a analog value from a potmeter connected to our Arduino.

.. figure:: ../../fig/one_potmeter_and_one_led_bb.png
  :scale: 50


Arduino software
----------------

Ideally you should not have to concern yourself with what kind of programming language will be used on one side of the communication link, when developing software on the other side. In our case that means that you should not need to know C# in order to develop the Arduino software, and you should not have to know C or Arduino in order to develop the C# software.

For this to work you should write a protocol specification before you start developing the software. In this first approach the following protocol is implemented (please note that this is a very naive approach):

Command: 'led' causes a LED on pin 9 to toggle. Command 'voltage' causes the Arduino to return the measured raw analog value on pin A0. No additional control data is transmitted, the controller does not return a confirmation message when it is told to toggle the LED, and the reception relies on a timeout insted of a end flag to signify complete data packet.

One could also note that the data is transmitted as ASCII, which means that a number that ideally takes up one byte, will use two bytes. And also the length of the commands are many bytes, which introduces unnecessary overhead.


.. literalinclude:: ../../../projects/remote_control/simple_arduino_slave/src/main.cpp
  :language: c


C# software
-----------

.. figure:: ../../fig/software/arduino_comm_screenshot.png
  :scale: 100


Improved example
================


For this improved example we will be using an ASCII based communication protocol. I.e. the data that appear on the UART should be readable when converted to it's character representation in the ASCII code. This introduces some overhead, but has the advantage that the protocol is easy to debug, and it is also testable using a simple UART serial terminal on a PC.

* # - Start flag
* <byte> 
* <byte>
* \n - End flag



Debugger
--------

The serial port is often used to print debug messages. When developing an application that uses the serial port for other purposes, it is no longer available for debugging. Arduino UNO contains only one hardware UART, but you can extend your application with software UART's.

The following Arduino program implements a simple bridge between a software UART, and a hardware UART. The software is intended to run on a additional Arduino, to aid in debugging of the code on our primary Arduino. The hardware UART is connected to a PC using USB, while the software UART is connected the the Arduino under test. The allows the Aruino under test to send debug messages using a software UART of it's own.

.. figure:: ../../fig/one_potmeter_and_one_led_with_debugger_bb.png
  :scale: 50

.. literalinclude:: ../../../projects/remote_control/arduino_softserial_debugger/src/main.cpp
  :language: c


Arduino software
-----------------

.. literalinclude:: ../../../projects/remote_control/improved_arduino_slave/src/main.cpp
  :language: c


C# software
-----------

Advanced example
================

.. figure:: ../../fig/one_potmeter_and_three_led_bb.png
  :scale: 50


Arduino software
----------------


C# software
-----------

.. figure:: ../../fig/software/adv_arduino_comm_screenshot.png
  :scale: 100 



    
Inter Integrated Circuit (I2C)
=====================================

.. warning:: pin numbers, where to use, SDA/SCL, advantages, history

I2C or :math:`I^2C` is a acronym for Inter integrated circuit, and is a serial communication bus standard released by Phillips in 1982. Initially intended for internal communication inside electronic appliances. It requires two wires SDA (Serial data), and SCL (Serial clock) in addition to a common ground.

The maximum physical separation between two deviced utilizing the bus is not defined in the standard, but a practical might be around 1 to 10 meters, depending on the baud rate. Longer lengths may work, but you may experience problems with reliability.

The System Management Bus (SMBus), defined by Intel in 1995, is a subset of :math:`I^2C`, defining additional features, such as automatic address configuration.

.. figure:: ../../fig/i2c_master_slave_interconnection.png
    :scale: 100

I2C operation
-------------

I2C uses a 7-bit address (it also supports 10-bit address), which theoretically allows 128 unique addresses (In practice only 127 because address 0b0000000 is reserved for a general call). Common :math:`I^2C` bus speeds include the 100 kbit/s standard mode, and the 400 kbit/s Fast mode.


The communication is initiated by the master, which sends a START condition followed by the 7-bit address and a single bit determining if it is a read (1) or a write (0) request. The START condition is signaled by allowing the data line (SDA) to go from high to low, while the clock line (SCL) remains high. The STOP condition is signaled by allowing the data line to go from low to high, while the clock line is high.

.. figure:: ../../fig/i2c_address_packet_format.png
    :scale: 100


System Management Bus (SMBus)
-----------------------------

The system managemen bus is an extension to I2C which has some useful additional features. In particular it supports a address resolution protocol for automatic slave identification, useful for plug and play support of external devices. It also has a feature known as the Host Notify protocol which allows a slave to initiate communication (the slave temporary becomes the master), and notify another device of some event.

I2C in Arduino
--------------

The standard library to use for I2C communication on the Arduino is the Wire library. The details on the functions in this library is available in the `Wire documentation <https://www.arduino.cc/en/reference/wire>`_

Connecting two Arduino's using I2C
--------------------------------------

The following example shows how to connect two Arduino UNO's using the I2C bus, each device will send anything it receives on the UART to the other device. One of the devices is operating in master mode, while the other is operating in slave mode. A slave can not initiate communication, but has to wait for the master to request data.

.. figure:: ../../fig/dual_arduino_i2c_communication_bb.png
    :scale: 50


Master
~~~~~~

.. literalinclude:: ../../../projects/i2c/simple_i2c_master/src/main.cpp
    :language: c


Slave
~~~~~

.. literalinclude:: ../../../projects/i2c/simple_i2c_slave/src/main.cpp
    :language: c


Reading and writing external EEPROM on I2C
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: The students do not have access to this kind of chip. Should we remove this section? Alternatively we could write a program that emulates an external EEPROM, and the students could work in groups, wher one arduino is reading the EEPROM of the other.


Serial Peripheral Interface (SPI)
=====================================
pin numbers, where to use, daisy-chain, advantages, history
Use your thesis

SPI (Serial Peripheral Interface Bus) is a synchronous serial communication interface developed by Motorola. It requires (at least) four wires:

* Serial Clock (SCLK)
* Master Output Slave Input (MOSI)
* Master Input Slave Output (MISO)
* Slave select (SS).

The slave select signal is used by the master to activate a given slave. Thus each slave requires a unique slave select wire.

SPI requires more wires than I2C, but it has some other advantages. In particular it supports higher data rate, and duplex communication (master and slave can send data at the same time). The maximum clock frequency supported by I2C on the Atmega 328 is 400kHz, while SPI supports 4Mhz.

SPI operation
-------------

The following figure depicts the operation of the SPI.

.. figure:: ../../fig/spi_master_slave_interconnection.png
    :scale: 100

The master initiates communication with a given slave by pulling the slave select pin low. The slave and master both prepare the data to be transmitted in the shift registers. The master generates the required clock signals in order to interchange the data between the two shift registers.

In master mode on the Atmega 328 the interface is implemented in such a way that the clock generator start automaically, when a byte is written to the shift register. The generated clock makes sure that a single byte is shifted, and then the clock signal is disabled.

The MISO pin on the slave is in tri-state mode as long as the Chip Select (SS) pin is high. This allows several slaves to share the same MISO wires.

The receive system is double buffered in order to allow time for the controller to read a byte from the buffer while the next byte is beeing received. The transmit system however is single buffered, which means that you must wait for the transmit cycle to complete before writing a new byte to the buffer.


SPI in Arduino
--------------

The official Arduino library for SPI communication is simply know as SPI, this library only supports operating in master mode. More information is available in the `spi documentation <https://www.arduino.cc/en/reference/SPI>`_. In order to implement an Arduino SPI slave we will be using direct register manipluation.


.. figure:: ../../fig/dual_arduino_spi_communication_bb.png
    :scale: 50


.. warning:: This code is not ready

Master
~~~~~~

.. literalinclude:: ../../../projects/spi/simple_spi_master/src/main.cpp
    :language: c


Slave
~~~~~~

.. warning:: Direct register manipluation is outside the curriculum of the course, thus you do not have to fully understand this code. You may simply use it on one Arduino device, in order to test the master code on another Arduino device.


.. literalinclude:: ../../../projects/spi/simple_spi_slave/src/main.cpp
    :language: c

SPI I/O port expander
-----------------------

A I/O port expander is a device that provides more digital I/O pins for the microcontroller, accessible using bus communication. Often this will be a specially made integrated circuit, such as the MCP23S17. It is possible to emulate the features of this chip using software on the Arduino.

In this example we will be using SPI to control the LED's, and read the push buttons on one Arduino from another.


Master
~~~~~~

.. literalinclude:: ../../../projects/spi/spi_io_port_expander_master/src/main.cpp
    :language: c


Slave
~~~~~~

.. warning:: Direct register manipluation is outside the curriculum of the course, thus you do not have to fully understand this code. You may simply use it on one Arduino device, and consider the Arduino running this code to be a simulation of a I/O expansion chip.


.. literalinclude:: ../../../projects/spi/spi_io_port_expander_slave/src/main.cpp
    :language: c


