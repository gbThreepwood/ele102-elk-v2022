.. _L4_hands_on_:

.. note:: *04/02/2020 - 75mins*

    **Should be finished with Lecture-4**

    - Digital I/O
    - Variable types
    - delay
    - Serial print    

******************************************************************
Various Hands on Activities
******************************************************************
Let's increace the practicality.

Digital I/O
==========================
You remember that in the last course we have compiled the built-in :code:`Blink` example. Let's remember the procedure first.

.. code-block:: c

   // the setup function runs once when you press reset or power the board
   void setup() {
      // initialize digital pin LED_BUILTIN as an output.
      pinMode(LED_BUILTIN, OUTPUT);
   }

   // the loop function runs over and over again forever
   void loop() {
      digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
      delay(1000);                       // wait for a second
      digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
      delay(1000);                       // wait for a second
   }

In this example :code:`LED_BUILTIN` is named as *Macro definition* which is a term to used the constant definitions as a pre-processor directive. In here the term :code:`LED_BUILTIN` is a place holder for the number **13**. Instead, we could have written the code like that and literally nothing would have change in practice:

.. code-block:: c

   // the setup function runs once when you press reset or power the board
   void setup() {
      // initialize digital pin LED_BUILTIN as an output.
      pinMode(13, OUTPUT);
   }

   // the loop function runs over and over again forever
   void loop() {
      digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
      delay(1000);                       // wait for a second
      digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
      delay(1000);                       // wait for a second
   }

However, this wouldn't look good in programming beauty standards. The reason is that whenever you have another LED attached to your Arduino, but in another pin than **13**, you need to change this *definition* in 3 different places. Therefore there are different *place holders* in the programming. Macro definitions are one of them and defined like:

.. code-block:: c

    #define identifier replacement


Basically, it says your processor that "whenever you see this :code:`identifier`, replace it with the :code:`replacement`". This way of introducing a place holder is executed in a pre-processor directive. It is not different than copying one text (as :code:`identifier`) and pasting another text (as :code:`replacement`).

Let's define our own macro definition for our external LED, attached to **pin number 2**. Also, change the blink rate from 1000 milliseconds to half a second.

.. code-block:: c

    #define MY_EXT_LED 2
    #define BLINK_RATE 500
    // the setup function runs once when you press reset or power the board
    void setup() {
      // initialize digital pin LED_BUILTIN as an output.
      pinMode(MY_EXT_LED, OUTPUT);
    }

    // the loop function runs over and over again forever
    void loop() {
      digitalWrite(MY_EXT_LED, HIGH);   // turn the LED on (HIGH is the voltage level)
      delay(BLINK_RATE);                       // wait for a second
      digitalWrite(MY_EXT_LED, LOW);    // turn the LED off by making the voltage LOW
      delay(BLINK_RATE);                       // wait for a second
    }


Serial Print
==========================

We will be using the following circuit:

.. figure:: ../../fig/single_potmeter_bb.png 
        :align: center
        :scale: 50

.. code-block:: c
  :caption: Analog read from a potentiometer, write the value.

    #define POT_PIN A0

    // the setup routine runs once when you press reset:
    void setup() {
      // initialize serial communication at 9600 bits per second:
      Serial.begin(9600);
    }

    // the loop routine runs over and over again forever:
    void loop() {
      int potVal = analogRead(POT_PIN); // read the input on analog pin
      Serial.println(potVal);  // print out the value you read
      delay(100);        // delay in between reads for stability
    }
