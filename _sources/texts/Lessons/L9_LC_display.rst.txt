.. LC_Display:

*****************
LC-Display
*****************

.. note::
   Write down Vcc,Vee,Vdd,Vss.


.. role:: ccode(code)
    :language: c


A Liquid crystal display (LCD) [#f1]_ is a form of flat panel display where liquid crystals are used to modulate light in order to change the appearance of the display.

Some displays are application specific, and only support displaying certain patterns (e.g. only numbers, or only text). Others consists of a matrix of pixels, where each individual pixel is controlled independently, either on/off, in different shades, or even in color.

Operation of the Hitachi HD44780 display controller
====================================================

The Hitachi HD44780 is a display controller for character displays, which includes support for ASCII, Japanese, and some additional symbols :cite:`hitachiHD44780Datasheet1998`. Many LC-displays, and vacuum fluorescent displays (VFD) controllers are compatible with the HD44780.

For simple display applications where one only needs to display text, this kind of display is a popular option.


Arduino control of Hitachi HD44780 compatible display
======================================================

Arduino comes with a official HD44780 library, which we will be using in the following sections. There are however several more capable libraries available, if you feel that this library is too limiting.

.. note:: Even though the library is official, you may still have to install it. The steps for installation will wary depending on which platform you are using (PlatformIO, or official Arduino IDE).

The following code will create a instance of the `LiquidCrystal` object called `lcd`. We will be using the `lcd` instance in the examples to follow.

.. code-block:: c

    const uint8_t rs = 2, en = 3, d4 = 4, d5 = 5, d6 = 6, d7 = 7;
    LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

The LCD library functions we will be using in this tutorial are:

- `lcd.begin() <https://www.arduino.cc/en/Reference/LiquidCrystalBegin>`_
- `lcd.write() <https://www.arduino.cc/en/Reference/LiquidCrystalWrite>`_
- `lcd.print() <https://www.arduino.cc/en/Reference/LiquidCrystalPrint>`_
- `lcd.setCursor() <https://www.arduino.cc/en/Tutorial/LiquidCrystalSetCursor>`_
- `lcd.clear() <https://www.arduino.cc/en/Reference/LiquidCrystalClear>`_

- `lcd.scrollDisplayLeft() <https://www.arduino.cc/en/Reference/LiquidCrystalScrollDisplayLeft>`_
- `lcd.scrollDisplayRight() <https://www.arduino.cc/en/Reference/LiquidCrystalScrollDisplayRight>`_

In the following examples we will be using this circuit:

.. figure:: ../../fig/lc_display_bb.png
    :scale: 50
    :align: center

Display uptime in seconds on UART and LCD
------------------------------------------

In the following example the current uptime in seconds is displayed on the LCD, as well as on the UART. There is one important difference to note between the two, as the cursor on the LCD is moved back with the :ccode:`setCursor()` method, while the cursor in your serial terminal is always moving forward.

.. literalinclude:: ../../../projects/lc_display_uptime/src/main.cpp
    :language: c


Display voltage value from potmeter
------------------------------------

In this example we will read a analog value from a potmeter connected to `A0`. The raw value, as well as the corresponding voltage level will be displayed on the LCD, as well as on the UART.

.. literalinclude:: ../../../projects/lc_display_potmeter_value/src/main.cpp
    :language: c


Splash screen and scrolling text
--------------------------------
Although splash screens can be anoying, and should be used sparingly, they will be used here to demonstrate some of the capabilities of the LC-display.

If you have more text to display than is available on the screen, one option is to use scrolling. Without any user input, you will have to implement automatic scrolling. You will often see this done in simple LC-displays used in various information screens.


.. literalinclude:: ../../../projects/lc_display_text_scroll/src/main.cpp
    :language: c


Display data from UART
----------------------

In this simple example we will take input from the serial terminal (UART), and print it on the LC-display. The LC-display will print both the character (if supported) and the actual binary data that is received (printed in decimal form).

.. note:: You should try to send special characters, such as æ, ø, and å and see how the display responds.

.. literalinclude:: ../../../projects/lc_display_uart_data/src/main.cpp
    :language: c

Display data in different formats
---------------------------------

In the following examples we will be using this circuit:

.. figure:: ../../fig/lc_display_potmeter_value_bb.png
    :scale: 50
    :align: center


In this example we will display the raw value of the analog reading on `A0`. The push button on pin `13` will toggle through various number bases for the display.


.. literalinclude:: ../../../projects/lc_display_analog_different_bases/src/main.cpp
    :language: c

Voltmeter with selectable scaling
---------------------------------

The following example shows how to implement a simple state machine which allows the user to select the scaling prefix of the measured voltage.

The following state diagram depicts the operation of the prefix display toggle functionality. 

.. uml::

        [*] --> MILLIVOLT

        MILLIVOLT -down-> KILOVOLT : toggle_button
        KILOVOLT -down-> VOLT : toggle_button
        VOLT -> MILLIVOLT : toggle_button

The following source code implements the state machine, as well as the additional functionallity that is required:

.. literalinclude:: ../../../projects/lc_display_voltmeter/src/main.cpp
    :language: c 

Graphic LC-display
==================

.. note:: Graphic LC-displays are outside the curriculum of the course, and only mentioned briefly for completeness.

Graphic LC-displays are often controlled by writing to a memory. Each bit it the memory may control a whole pixel on simple displays, or parts of a pixel (e.g. its brightness, or color), on more complex displays.

For simple displays each bit of the memory turns a pixel on or off.

.. rubric:: Footnotes

.. [#f1] A LC-display is often erroneously referred to as a LCD-display. This kind of cognitive error is known as RAS syndrome (redundant acronym syndrome syndrome).

LCD and Interrupt Class Activity Codes
======================================

Here are the codes of the class activity. The aim is to get rid of the :code:`delay(ms)` and use the time in a wiser way. The example is taken from `EEenhusiast <https://eeenthusiast.com/arduino-delay-function-tutorial-on-software-interrupts-timer-library-alternatives-to-delay/>`_. So let's get started.

We have LCD circuit already built from the previous examples. We also attached a potentiometer to pin :code:`A0`. We would like to read the analog value from this potentiometer and display in on LCD immediately. 

In the working principle of the LCD, you have to :code:`print` the characters and :code:`clear` the LCD afterwards. Otherwise, you will have a blended display. You can try it out by yourself only with :code:`lcd.print()` and removing the :code:`lcd.clear()` in your code.

There is one important point in printing/clearing the LCD. If you clear the display so quickly, then you have a flicker problem. That's why, it is better to wait a little before clearing the screen for a better display quality. The following code is the simplest way to do it.

.. literalinclude:: ../../../projects/LCD_Interrupts_1/LCD_Interrupts_1.ino
    :language: c 

This code works perfectly in such a simple program. However, delays are always enemies of bigger programs. :code:`delay(ms)` stops all other executions, such as pin read/write, calculations, communications with the other sensors etc. Basically it halts the whole process in the specified period of time. That's why delays are one of the biggest problems in efficiency.

Insted of using a :code:`delay(ms)` function, we can use :code:`millis()` function. We can set a time interval and execute the routine in everr interval of time. Here is the same code without using any delay function.

.. literalinclude:: ../../../projects/LCD_Interrupts_2/LCD_Interrupts_2.ino
    :language: c 

Now, you can execute any other processes in your main function without adding an extra waiting time.

However, this is still not the efficient way. There is another process that takes a lot of time in the main process. We can do in in another way since there is a hidden "delay" or a "wait" in this process. Yes, I am talking about :code:`analogRead(A0)`. 

ADC is a pretty slow process compated to many other processes that you execute on a microcontroller. Actually, you don't have to wait the whole time of the conversion. You can instead set an ISR (Interrupt Service Routine) and pull the data in a specified period of time. The next code shows how it is done.

.. literalinclude:: ../../../projects/LCD_Interrupts_3/LCD_Interrupts_3.ino
    :language: c 


As you can see, we moved the ADC process in an ISR function. We call this ISR function in every 100000 microseconds (as we specified in the :code:`setup()` function.

Yet, there is one more step to increase efficiency here. We can merge the wait time for LCD to clear and the conversion time for the analogRead. If we get rid of the waiting setup with the millis() function and move this process intp the ISR, we can achive this objective. Here is the code for that.

.. literalinclude:: ../../../projects/LCD_Interrupts_4/LCD_Interrupts_4.ino
    :language: c 


Here you see a long long delay. This is only to demonstrate other processes that you may do inside your main function. It wouldn't be nice to leave the main function completely empty but it doesn't have any purpose at all. Also, see that the :code:`delay(ms)` function is only be cut off with an interrupt routine.


Bibliography
============

.. bibliography:: ../../bib/displays.bib
        :style: unsrt
