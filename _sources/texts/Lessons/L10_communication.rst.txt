.. _L9_communication:

.. note:: *11/03/2020 - 195mins*

    **Aim:**

    - I2C, SPI, UART/USART basics
    - they are mostly SoC protocols, low range
    - mention long range ones like RF, Ethernet etc but very basic.
    - why do we need a communication protocol?
    - Teach how to read a Datasheet 
        - IMU
        - NRF
        - MA702
        - Atmega328P
    - you can connect even 2 arduinos !


    **Materials:**

    - Arduino Board
    - Button
    - Cables
    - Breadboard
    - Potentiometer
    - Resistors
    - LED
    - MPU6050
    - NRF24L01 x 2
    - OLED



    **Code:**

    - Ex: NRF LED on/off (connected via SPI)
    - Hw: provide MPU6050 psudo code, make them plot acceleration

.. role:: ccode(code)
        :language: c

*************************************
Communication Protocols
*************************************

A communication protocol is a system of rules governing how two entities are to communicate with each other. Often it is usefull to separate the protocol into various layers, governing different aspects of the communication. Some layers may be general in nature, and applicable to many systems, while others may be very application specific. 

    Why do we need ports?
    *There was a dark era before some protocols are decided...*

    .. image:: ../../fig/port_fuck.jpeg
            :alt: To avoid from mess
            :scale: 100
            :align: center


UART/USART
=====================================
pin numbers, where to use, baud rate, sync vs async


Basically, as most of you know, you are uploading your sketches to the Arduino using a USB cable.  The general name of the underlying protocol that is used is `UART <https://www.wikiwand.com/en/Universal_asynchronous_receiver-transmitter>`_ (or sometimes more generally referred to as  `USART <https://www.wikiwand.com/en/Universal_synchronous_and_asynchronous_receiver-transmitter>`_). 

The USB employs a complicated communication protocol, but drivers on the PC end, and a chip on the Arduino end converts this to a simple UART protocol.

.. warning::
        TODO: Explain the basics of the operation of UART and USART.


UART
----

The UART operates whitout a common clock signal for synchronization, hence the asynchronous part of the name. The sender and receiver is syncronized by means of start and stop signals as part of the data stream.

Higher level protocol layers
----------------------------

The UART as a communication protocol is very basic and puts few constraints on how information should be transmitted. A higher level applicaton specific communication protocol is needed in order to use the UART in a reliable communication system.


Serial terminal emulator software
=================================

Both the standard Arduino IDE, and Visual studio code (with PlatformIO) has built in serial terminal emulators. If however you require more advanced features, different software might be more appropriate.

Minicom is a popular GNU/Linux serial terminal. Refer to the manual for your distribution for instructions on how to install it.

PuTTY is a popular alternative for Windows. You may download it at `putty.org <https://www.putty.org/>`_.


UART communication in Arduino
====================================

This section covers the communication between Arduino and a PC using the single hardware UART available on the Arduino Uno.

.. warning::

    On the Arduino Uno, pins 0 and 1 are used for communication with the computer. Connecting anything to these pins can interfere with that communication, including causing failed uploads to the board.

The Arduino functions associated with writing data to the serial port that we will be using in this tutorial are:

- `Serial.begin() <https://www.arduino.cc/reference/en/language/functions/communication/serial/begin/>`_

- `Serial.write() <https://www.arduino.cc/reference/en/language/functions/communication/serial/write/>`_
- `Serial.print() <https://www.arduino.cc/reference/en/language/functions/communication/serial/print/>`_
- `Serial.println() <https://www.arduino.cc/reference/en/language/functions/communication/serial/println/>`_
- `Serial.availableForWrite() <https://www.arduino.cc/reference/en/language/functions/communication/serial/availableforwrite/>`_

The Arduino functions associated with reading data from the serial port that we will be using in this tutorial are:

- `Serial.read() <https://www.arduino.cc/reference/en/language/functions/communication/serial/read/>`_
- `Serial.readBytes() <https://www.arduino.cc/reference/en/language/functions/communication/serial/readbytes/>`_
- `Serial.readString() <https://www.arduino.cc/reference/en/language/functions/communication/serial/readstring/>`_
- `Serial.readStringUntil() <https://www.arduino.cc/reference/en/language/functions/communication/serial/readstringuntil/>`_
- `Serial.available() <https://www.arduino.cc/reference/en/language/functions/communication/serial/available/>`_
- `Serial.setTimeout() <https://www.arduino.cc/reference/en/language/functions/communication/serial/settimeout/>`_

Serial output
-------------

This section covers the basics of transmission of data from Arduino to a serial terminal on your PC.

Basic serial output example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example illustates how to transmit "Hello world" over the serial port:

.. code-block:: c

    void setup() {
        Serial.begin(9600); // open the serial port at 9600 bps
    }

    void loop() {
        Serial.println("Hello world"); // text written what you want to see      
        delay(500); // delay 0.5 seconds before the sending
    }




Initialization
~~~~~~~~~~~~~~~~~~~~~~

Before you can use the :ccode:`Serial` object in Arduino it must be initialized with some configuration. Often you will simply see: :ccode:`Serial.begin(9600)`. This configures the serial port for 9600 bits per second, 8 data bits, one start bit, no parity bit, and one stop bit. This configuration is rather common, and thus it is also the default, when you specify nothing. If you want to be explicit, you may use:

.. code-block:: c

        Serial.begin(9600,SERIAL_8N1);

Although the bit configuration is often left alone, it is common to adapt the baudrate (in this context the baudrate is the number of bits per second). In order to specifiy the next higher standard baudrate of 19200, you may use:

.. code-block:: c

        Serial.begin(19200,SERIAL_8N1);

If you wish to use parity, or adjust the number of data bits, there are many predefined configurations. E.g.:

.. code-block:: c
       
        Serial.begin(19200,SERIAL_5E2);

.. warning::
        Unless you understand the implications, and know that you need something else, it is probably best to stay with the default configuration.

The explanation for the semingly arbritary baudrate of 9600 lies in the first applications of this kind of communication systems. Old mechanical teletypewriters operated at 75 baud, and thus some of the first modems also used that speed. Later modems used 150 baud, then 300 baud, and then 1200, 2400, and 9600 baud. All baudrates are multiples of two, which simplified the design, and allowed one system to easily support multiple baudrates.

Some baudrates that are communly supported include:

* 9600
* 19200
* 38400
* 57600
* 115200

The `Serial.write()` method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :ccode:`Serial.write()` method writes binary data to the serial port. It is useful for low level writing, when you want the actual number, rather than it's ASCII representation to be written to the terminal.

In order to write a lower case "f" to the terminal you may use:

.. code-block:: c

    Serial.write(102);

or:

.. code-block:: c

    Serial.write("f");

But if you want to write the number 102 (i.e. the integer 102, not the string "102"), such that it is displayed as "102" in the terminal, that number must first be converted to a string. The number is one byte, but it's ASCII representation is three bytes:

.. code-block:: c
    
    Serial.write(49);
    Serial.write(48);
    Serial.write(50);

The :ccode:`Serial.write()` metod stores the data to be transmitted in a buffer, before returning immediately. The actual transmission is handled by a ISR. If the buffer is full however, the method will block until there is sufficient free space. If you cannot afford the risk of the code blocking, you should use the method :ccode:`Serial.availableForWrite()` to check if the buffer has free space before writing.
 
The `Serial.print()` method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
The :ccode:`Serial.print()` method simplifies the writing of numbers, as it automatically converts them to ASCII. The following will print the number as ASCII:

.. code-block:: c

    Serial.print(102);

The :ccode:`Serial.print()` method support a parameter specifying how to print a integer:

* :ccode:`Serial.print(154, BIN);` prints 10011010.
* :ccode:`Serial.print(154, OCT);` prints 232.
* :ccode:`Serial.print(154, DEC);` prints 154.
* :ccode:`Serial.print(154, HEX);` prints 9A.

If the passed number is floating point, the second parameter is used to specify how many decimal places to use:

* :ccode:`Serial.print(1.2345, 2);` prints 1.23.
 
The `Serial.println()` method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :ccode:`Serial.println()` method works in the same manner as :ccode:`Serial.print()` with the addition of a carrige return and line feed appended at the end.

Serial output of the push button state
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's write a program that takes the button state, and writes it on your serial monitor .

This will look like that with your breadboard and Arduino:

.. figure:: ../../../external/fig/buttonconnect.png
   :align: center

The following code continously prints the state of the push button to the serial port:


.. code-block:: c
    
    #include <Arduino.h>
    
    uint8_t button_pin = 2;
    
    void setup() {
    
      pinMode(button_pin, INPUT);
    
      Serial.begin(9600);
    }
    
    void loop() {
      uint8_t button_state = digitalRead(button_pin);
      Serial.println(button_state);
      delay(1);
    }
      

Serial input
------------

When the Arduino receives data on the serial port the data is automatically stored in a buffer. When the buffer is full, Arduino ignores any new data until the buffer is drained. Several of the functions used to access this buffer, automatically frees the memory.

The Serial.read() method
~~~~~~~~~~~~~~~~~~~~~~~~

In order to read a single byte from the serial port we may use the `Serial.read()` method.
    
.. code-block:: c

    Serial.read();

It is pointless to read the serial port if no data is available, thus we use the `Serial.available()` method to check if there is data in the buffer first.

.. code-block:: c

    Serial.available();

The :ccode:`Serial.read()` method returns "-1" if no data is available on the serial port. This can be used to check if the buffer is empty, but it can also be problematic if one wishes to use it for a binary communication protocol, where the binary code for "-1" could be part of the transmission. 


The following example shows how to read all keystrokes in the terminal, and feed back the ASCII code, as well as the character:

.. code-block:: c
    
    #include <Arduino.h>
    
    void setup() {
      Serial.begin(9600);
      Serial.println("Press any key: ");
    }
    
    void loop() {
    
        uint8_t data;
        
        if(Serial.available()){
            data = Serial.read();
            Serial.print("Data: ");
            Serial.print(data);
            Serial.print(" : Tegn: ");
            Serial.write(data);
            Serial.print("\n");
        }
    }


The Serial.readBytes() method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :ccode:`Serial.readBytes()` method reads one or more bytes from the serial port, and stores them in a specified buffer. The method is blocking until the specified number of bytes are received, or a timeout occurs. The timeout delay is configured by the method :ccode:`Serial.setTimeout()`.

.. code-block:: c
        
        Serial.readBytes(buffer, length)

The binary nature of this function makes it usefull for binary transfers, but more complicated to use for normal text.

The following example reads a maximum of five bytes from the serial port. If five bytes are received, or a timeout occurs, the data is printed back on the serial port.

.. literalinclude:: ../../../projects/serial_read_bytes/src/main.cpp 
        :language: c

The Serial.readString() method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :ccode:`Serial.readString()` method reads one or more bytes from the serial port, and stores them i a specified buffer. The method takes no parameters, and returns on a timeout.

.. code-block:: c

    Serial.readString()

The following example reads data from the serial port until a timeout occurs.

.. literalinclude:: ../../../projects/serial_read_string/src/main.cpp 
        :language: c

The Serial.readStringUntil() method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :ccode:`Serial.readStringUntil()` method reads data from the serial port until it reaches a termination character.

.. code-block:: c
    
    Serial.readStringUntil(terminator)

The following example reads data from the serial port until a newline character is received (i.e. you press ENTER), or a timeout occurs. The data is then written back to the serial port.

.. literalinclude:: ../../../projects/serial_read_string_until/src/main.cpp 
        :language: c

Store the strings in program memory
-----------------------------------

By default the strings you use in your writes to the serial port are stored in RAM. The SRAM in Atmega328P is only 2 kB. If you have lots of text that you wish to send to the serial port, this can quickly consume all of your memory.

To overcome this issue you may store the strings in program memory. There are however some implications to consider.

This fact may seem a bit confusing to anyone that is new to microcontrollers. After all the SRAM is volatile, all it's content is deleted when you reset or power off the microcontroller. Then how can the strings survive the power cycle? The explanation for this is that the strings are stored in program memory, and copied into SRAM during the boot process of the controller. In other words they occupy the same amount of memory in both SRAM, and flash ROM.

This is required because the CPU instruction to read RAM differ from the function (LPM) that read the flash ROM. Any function that supports normal variables will fail to access data from ROM.

You may read more about the various memories in Arduino `here <https://playground.arduino.cc/Learning/Memory/>`_

In order to tell the compiler to store data in program memory you may use the `PROGMEM` modifier:

.. code-block:: c

        const PROGMEM uint16_t testData[] = { 65535, 32000, 12000, 20, 12345};



The following example illustrates how to store and retrieve some numbers, and one string from program memory:

.. literalinclude:: ../../../projects/serial_write_string_from_progmem/src/main.cpp
        :language: c


If all you need is to write a string to the serial port, and you don't want to waste memory the `F()` macro may be used:

.. code-block:: c

        Serial.print(F("This string is constant, thus it is best to store it in FLASH"));


You may read more about how to use the program memory to store data in the `Arduino reference <https://www.arduino.cc/reference/tr/language/variables/utilities/progmem/>`_

Simple command line interface
-----------------------------

In order to interact with the software in the Arduino while it is running, we will create a simple command line interface.

.. literalinclude:: ../../../projects/serial_command_line_interface/src/main.cpp 
    :language: c

Arduino serial port buffer
--------------------------

The Arduio uno has circular RX and TX buffers of 64 bytes. If the buffer is full, incoming data is discarded.


.. code-block:: c
    
    #define SERIAL_TX_BUFFER_SIZE 64
    #define SERIAL_RX_BUFFER_SIZE 64


Connecting two Arduino's using UART
------------------------------------

The following example shows how to communicate between two Ardiuno UNO's using the UART. On each device pin 2 is used for reception (RX), and pin 3 is used for transmission (TX). The TX output of one device is connected to the RX input of the other.

.. figure:: ../../fig/dual_arduino_uart_communication_bb.png
    :scale: 50


.. literalinclude:: ../../../projects/uart/arduino_uart_link/src/main.cpp
    :language: c

    
Inter Integrated Circuit (I2C)
=====================================

.. warning:: pin numbers, where to use, SDA/SCL, advantages, history

I2C or :math:`I^2C` is a acronym for Inter integrated circuit, and is a serial communication bus standard released by Phillips in 1982. Initially intended for internal communication inside electronic appliances. It requires two wires SDA (Serial data), and SCL (Serial clock) in addition to a common ground.

The maximum physical separation between two deviced utilizing the bus is not defined in the standard, but a practical might be around 1 to 10 meters, depending on the baud rate. Longer lengths may work, but you may experience problems with reliability.

The System Management Bus (SMBus), defined by Intel in 1995, is a subset of :math:`I^2C`, defining additional features, such as automatic address configuration.

.. figure:: ../../fig/i2c_master_slave_interconnection.png
    :scale: 100

I2C operation
-------------

I2C uses a 7-bit address (it also supports 10-bit address), which theoretically allows 128 unique addresses (In practice only 127 because address 0b0000000 is reserved for a general call). Common :math:`I^2C` bus speeds include the 100 kbit/s standard mode, and the 400 kbit/s Fast mode.


The communication is initiated by the master, which sends a START condition followed by the 7-bit address and a single bit determining if it is a read (1) or a write (0) request. The START condition is signaled by allowing the data line (SDA) to go from high to low, while the clock line (SCL) remains high. The STOP condition is signaled by allowing the data line to go from low to high, while the clock line is high.

.. figure:: ../../fig/i2c_address_packet_format.png
    :scale: 100


System Management Bus (SMBus)
-----------------------------

The system managemen bus is an extension to I2C which has some useful additional features. In particular it supports a address resolution protocol for automatic slave identification, useful for plug and play support of external devices. It also has a feature known as the Host Notify protocol which allows a slave to initiate communication (the slave temporary becomes the master), and notify another device of some event.

I2C in Arduino
--------------

The standard library to use for I2C communication on the Arduino is the Wire library. The details on the functions in this library is available in the `Wire documentation <https://www.arduino.cc/en/reference/wire>`_

Connecting two Arduino's using I2C
--------------------------------------

The following example shows how to connect two Arduino UNO's using the I2C bus, each device will send anything it receives on the UART to the other device. One of the devices is operating in master mode, while the other is operating in slave mode. A slave can not initiate communication, but has to wait for the master to request data.

.. figure:: ../../fig/dual_arduino_i2c_communication_bb.png
    :scale: 50


Master
~~~~~~

.. literalinclude:: ../../../projects/i2c/simple_i2c_master/src/main.cpp
    :language: c


Slave
~~~~~

.. literalinclude:: ../../../projects/i2c/simple_i2c_slave/src/main.cpp
    :language: c


Reading and writing external EEPROM on I2C
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: The students do not have access to this kind of chip. Should we remove this section? Alternatively we could write a program that emulates an external EEPROM, and the students could work in groups, wher one arduino is reading the EEPROM of the other.


Serial Peripheral Interface (SPI)
=====================================
pin numbers, where to use, daisy-chain, advantages, history
Use your thesis

SPI (Serial Peripheral Interface Bus) is a synchronous serial communication interface developed by Motorola. It requires (at least) four wires:

* Serial Clock (SCLK)
* Master Output Slave Input (MOSI)
* Master Input Slave Output (MISO)
* Slave select (SS).

The slave select signal is used by the master to activate a given slave. Thus each slave requires a unique slave select wire.

SPI requires more wires than I2C, but it has some other advantages. In particular it supports higher data rate, and duplex communication (master and slave can send data at the same time). The maximum clock frequency supported by I2C on the Atmega 328 is 400kHz, while SPI supports 4Mhz.

SPI operation
-------------

The following figure depicts the operation of the SPI.

.. figure:: ../../fig/spi_master_slave_interconnection.png
    :scale: 100

The master initiates communication with a given slave by pulling the slave select pin low. The slave and master both prepare the data to be transmitted in the shift registers. The master generates the required clock signals in order to interchange the data between the two shift registers.

In master mode on the Atmega 328 the interface is implemented in such a way that the clock generator start automaically, when a byte is written to the shift register. The generated clock makes sure that a single byte is shifted, and then the clock signal is disabled.

The MISO pin on the slave is in tri-state mode as long as the Chip Select (SS) pin is high. This allows several slaves to share the same MISO wires.

The receive system is double buffered in order to allow time for the controller to read a byte from the buffer while the next byte is beeing received. The transmit system however is single buffered, which means that you must wait for the transmit cycle to complete before writing a new byte to the buffer.


SPI in Arduino
--------------

The official Arduino library for SPI communication is simply know as SPI, this library only supports operating in master mode. More information is available in the `spi documentation <https://www.arduino.cc/en/reference/SPI>`_. In order to implement an Arduino SPI slave we will be using direct register manipluation.


.. figure:: ../../fig/dual_arduino_spi_communication_bb.png
    :scale: 50


.. warning:: This code is not ready

Master
~~~~~~

.. literalinclude:: ../../../projects/spi/simple_spi_master/src/main.cpp
    :language: c


Slave
~~~~~~

.. warning:: Direct register manipluation is outside the curriculum of the course, thus you do not have to fully understand this code. You may simply use it on one Arduino device, in order to test the master code on another Arduino device.


.. literalinclude:: ../../../projects/spi/simple_spi_slave/src/main.cpp
    :language: c

SPI I/O port expander
-----------------------

A I/O port expander is a device that provides more digital I/O pins for the microcontroller, accessible using bus communication. Often this will be a specially made integrated circuit, such as the MCP23S17. It is possible to emulate the features of this chip using software on the Arduino.

In this example we will be using SPI to control the LED's, and read the push buttons on one Arduino from another.


Master
~~~~~~

.. literalinclude:: ../../../projects/spi/spi_io_port_expander_master/src/main.cpp
    :language: c


Slave
~~~~~~

.. warning:: Direct register manipluation is outside the curriculum of the course, thus you do not have to fully understand this code. You may simply use it on one Arduino device, and consider the Arduino running this code to be a simulation of a I/O expansion chip.


.. literalinclude:: ../../../projects/spi/spi_io_port_expander_slave/src/main.cpp
    :language: c


Appendix
========

.. note::
        The topics in the appendix are outside the curriculum of the course. Only for students that are especially curious.

ANSI Escape sequences
---------------------
If you wish to have control over the behaviour of your serial terminal, you may use Escape sequences.


How to design a reliable communication protocol
-----------------------------------------------

The design of reliable communication protocols is a topic for a complete course on it's own, here I will only provide some general rules to help you avoid the most common pitfalls.


