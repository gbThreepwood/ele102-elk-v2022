
Timers and Interrupts
======================

A interrupt is some form of external signal that interrupts the main process. When an interrupt occurs the current execution state of the main process is stored, before a different process (the ISR, or interrupt service routine) takes over. When the interrupt service routine has completed, execution control is returned to the main process.

Interrupts are useful for making the system responsive to external events while avoiding constant polling of the possible external event sources. The ISR may simply set a flag, or publish a message in a event queue such that the main process can take appropirate action when it is ready to do so.

The first section of this lecture describes how and when the interrupts are preferable over polling techniques. The following sections explain how the interrupt mechanism works. The second half of the lecture notes, starting with the section "Management of Interrupts," describes the common problems and programming mistakes and their solutions in utilizing interrupts in typical microcontroller applications.


Timing in Microcontrollers
---------------------------

A timer is a specialized type of clock which is used to measure time intervals. A timer that counts from zero upwards for measuring time elapsed is often called a stopwatch. It is a device that counts down from a specified time interval and used to generate a time delay, for example, an hourglass is a timer.

A counter is a device that stores (and sometimes displays) the number of times a particular event or process occurred, with respect to a clock signal. It is used to count the events happening outside the microcontroller. In electronics, counters can be implemented quite easily using register-type circuits such as a flip-flop. [#f2]_

Timers are counters that can be programmed to perform a variety of functions. Following are the typical operation modes and possible applications of timers:

**1. Programmed operation:** A timer can be used as an alarm clock to generate predetermined time delays. The  microprocessor sets the count limit or initializes the counter and enables the count operation. The timer generates an interrupt when the count limit is reached indicating the end of the programmed delay period. This mode of operation utilizes the internal clock and it does not require an external connection.

**2. Gated or triggered operation:** The count operation is controlled by an external signal. There may be several options to start and to stop the counter. In gated mode, the counter is enabled while the external signal is active. A multi-purpose timer allows independent selection of events that start and stop the counter. These events can be a rising or falling edge of the external trigger signal or an internal start/stop command issued by the microprocessor itself. The timer can be programmed to generate an interrupt when the counter stops. The common applications of gated or triggered operation involve any kind of time measurements, such as, measuring revolution time of a motor to detect its rotation speed, or quantification of time-encoded signals.

**3. Clocked operation:** The counter clock is supplied by an external signal while the count operation is enabled by the microprocessor or another timer. The typical applications include quantization of frequency-encoded signals, or position information generated by linear or rotational encoders.

The specifications for a timer are directly related to the requirements of the application:


**1. Maximum clock frequency** determines the timing resolution. The internal clock frequencies available for timer operations depend on the microprocessor clock.

**2. Number of counter bits** determines the count range or the maximum time period that can be measured.
**3. Functionality:** Having a programmable timer does not necessarily mean that it will support all operation modes and gating or triggering options. You need to read the timer description to find out whether it is useful for your application or not. You may as well need additional features such as buffering of timer count results for motor speed measurements. A timer with buffered outputs can store the count result at the end of every motor revolution and re-start the counting process immediately.


**Watchdog timers** are special-purpose timers dedicated to ensure the proper execution of microcontroller functions. The processor is required to restart the watchdog timer before the preset timer period expires and it repeats this operation as long as the watchdog function is enabled. The program written for the processor includes the necessary statements to restart the watchdog timer periodically. If the processor fails to restart the watchdog timer, then this indicates a major functional failure due to corrupt program memory or some other reason. In this case, the watchdog timer resets the processor, forcing initialization of all microcontrollerfunctions [#f1]_.

Timers in Arduino
~~~~~~~~~~~~~~~~~~
All timers depends on the system clock of your Arduino system. Normally the system clock is 16MHz

The timer hardware can be configured with some special timer registers. In the Arduino firmware all timers were configured to a 1kHz frequency and interrupts are gerally enabled.


Timer0:
Timer0 is a 8bit timer.
In the Arduino world timer0 is been used for the timer functions, like [delay() 811](http://arduino.cc/en/Reference/Delay),[ millis() 1.8k](http://arduino.cc/en/Reference/Millis) and[ micros() 804](http://arduino.cc/en/Reference/Micros). If you change timer0 registers, this may influence the Arduino timer function. So you should know what you are doing.

Timer1:
Timer1 is a 16bit timer.
In the Arduino world the [Servo library 1.3k](http://arduino.cc/en/Reference/Servo) uses timer1 on Arduino Uno (timer5 on Arduino Mega). 

Timer2:
Timer2 is a 8bit timer like timer0.
In the Arduino work the [tone() 1.1k](http://arduino.cc/en/Reference/Tone) function uses timer2.

Timer3, Timer4, Timer5:
Timer 3,4,5 are only available on Arduino Mega boards. These timers are all 16bit timers. [#f3]_

.. seealso:: `Arduino timers for *super nerd*s <https://www.robotshop.com/community/forum/t/arduino-101-timers-and-interrupts/13072>`_.

Different Timer purposes
~~~~~~~~~~~~~~~~~~~~~~~~~

Timer Overflow:
Timer overflow means the timer has reached is limit value. When a timer overflow interrupt occurs, the timer overflow bit TOVx will be set in the interrupt flag register TIFRx. When the timer overflow interrupt enable bit TOIEx in the interrupt mask register TIMSKx is set, the timer overflow interrupt service routine ISR(TIMERx_OVF_vect)  will be called.

Output Compare Match:
When a output compare match interrupt occurs, the OCFxy flag will be set in the interrupt flag register TIFRx . When the output compare interrupt enable bit OCIExy in the interrupt mask register TIMSKx is set, the output compare match interrupt service ISR(TIMERx_COMPy_vect) routine will be called.

Timer Input Capture:
When a timer input capture interrupt occurs, the input capture flag bit ICFx will be set in the interrupt flag register TIFRx. When the input capture interrupt enable bit  ICIEx in the interrupt mask register TIMSKx is set, the timer input capture interrupt service routine ISR(TIMERx_CAPT_vect) will be called.

PWM and timer
There is fixed relation between the timers and the PWM capable outputs. When you look in the data sheet or the pinout of the processor these PWM capable pins have names like OCRxA, OCRxB or OCRxC (where x means the timer number 0..5). The PWM functionality is often shared with other pin functionality.
The Arduino has 3Timers and 6 PWM output pins. The relation between timers and PWM outputs is:
Pins 5 and 6: controlled by timer0
Pins 9 and 10: controlled by timer1
Pins 11 and 3: controlled by timer2

Servo Library uses Timer1. You canâ€™t use PWM on Pin 9, 10 when you use the Servo Library on an Arduino


Interrupts in Arduino
-----------------------
There are some important keynotes `About Interrupt Service Routines <https://www.arduino.cc/reference/en/language/functions/external-interrupts/attachinterrupt/>`_ in Arduino. 

Properties of ISR (Interrupt Service Routine):

#. Global variables used in an ISR must be :code:`volatile`.
#. Must be fast and short functions.
#. No delay in the interrupt.
#. An ISR cannot have parameters - no input argument, no output return.
#. Stops **everything** in the main function.
#. :code:`millis()` doesn't work properly, :code:`delayMicroseconds()` works since it does not use any counter.

Can be:

- Internal 
- External: digital pins, or communication channels (UART/SPI/I2C)

In Arduino interrupts, you can set how the interrupts are been triggered. There are five types of triggering Arduino interrupts:

- Change: When signal change even if signal rise or signal fall or if the signal is in low state at 0 or if the signal is in high state trigger 5v.

#. Rising: On a rising edge the signal going from low to high means signal triggering from 0v to 5v.
#. Falling: On a falling edge the signal going from high to low means signal is triggering from 5v to 0v.
#. Low: Low is a continuous trigger whenever the signal is low in other words the signal is on 0v.
#. High: High is a continuous trigger whenever the signal is high in other words the signal is on 5v. (Not in Arduino UNO)

The syntax which are going to be attach interrupt and specify the pin e.g. pin number 2 than ISR is the function which is going to be call and mode tells that whenever the interrupts is been triggered.



External Interrupts
~~~~~~~~~~~~~~~~~~~~

Created by sensors (via communication channels) or buttons.

An external interrupt is defined as:

.. code-block:: c

   attachInterrupt(digitalPinToInterrupt(pin), ISR, mode)


**Practical exercise:** Modify the RGB-LED code such that the blinking should stop immediately as soon as the button is pressed and should continue again as soon as it is released.


Although we are using the :code:`delay()` function in almost everywhere, it is a very dangerous function. It halts any processing completely. No reading of sensors, mathematical calculations, or pin manipulation can go on during delay function.

    
**Exercise for home:** Modify the interrupt code without using delay functions. There is a very nice project using an LCD in `this link <https://www.youtube.com/watch?v=TD-J7LgrsBQ>`_.



Internal Interrupts
~~~~~~~~~~~~~~~~~~~~~

Timer based interrupts.

All timers depends on the system clock of your Arduino system. Normally the system clock is 16MHz, but for the Arduino Pro 3,3V it is 8Mhz. So be careful when writing your own timer functions.
The timer hardware can be configured with some special timer registers. In the Arduino firmware all timers were configured to a 1kHz frequency and interrupts are gerally enabled.


.. note::
   Since internal timers are created by changing the Timer behaviour through the timer register, we will not cover it here. This subject requires at least intermediate embedded programming skills and datasheet reading. However, this is one of the most important topics in the embedded systems. For those who are willing to learn this topic should know about setup and Use of the Timers* (`AVR130: Setup and Use the AVR Timers <http://ww1.microchip.com/downloads/en/AppNotes/Atmel-2505-Setup-and-Use-of-AVR-Timers_ApplicationNote_AVR130.pdf>`_.


.. note::
   :code:`interrupts()` and :code:`noInterrupts()` for the critical parts of the code. - https://www.arduino.cc/reference/en/language/functions/interrupts/interrupts/


**Practical Exercise:** Let's write a program with an RGB light, blinking each LED for 1 second (reg, green, blue, white) and repeat it infinitely. Also, attach a button that stops blinking of all LEDs. Do not use any interrupt knowledge at first and let's see what happens. Afterwards, define your button as an interrupt and see what changes.

No more delay()
-----------------
Using delay() to control timing is probably one of the very first things you learned when experimenting with the Arduino. Timing with delay() is simple and straightforward, but it does cause problems down the road when you want to add additional functionality. The problem is that delay() is a "busy wait" that monopolizes the processor. 

During a delay() call, you canâ€™t respond to inputs, you can't process any data and you canâ€™t change any outputs. The delay() ties up 100% of the processor.  So, if any part of your code uses a delay(), everything else is dead in the water for the duration.

Blink without delay:

.. code-block:: c

    /*
     http://www.arduino.cc/en/Tutorial/BlinkWithoutDelay
    */

    // constants won't change. Used here to 
    // set pin numbers:
    const int ledPin =  13;      // the number of the LED pin

    // Variables will change:
    int ledState = LOW;             // ledState used to set the LED
    long previousMillis = 0;        // will store last time LED was updated

    // the follow variables is a long because the time, measured in miliseconds,
    // will quickly become a bigger number than can be stored in an int.
    long interval = 1000;           // interval at which to blink (milliseconds)

    void setup() {
    // set the digital pin as output:
    pinMode(ledPin, OUTPUT);      
    }

    void loop()
    {
    // here is where you'd put code that needs to be running all the time.

    // check to see if it's time to blink the LED; that is, if the 
    // difference between the current time and last time you blinked 
    // the LED is bigger than the interval at which you want to 
    // blink the LED.
    unsigned long currentMillis = millis();
    
    if(currentMillis - previousMillis > interval) {
        // save the last time you blinked the LED 
        previousMillis = currentMillis;   

        // if the LED is off turn it on and vice-versa:
        if (ledState == LOW)
        ledState = HIGH;
        else
        ledState = LOW;

        // set the LED with the ledState of the variable:
        digitalWrite(ledPin, ledState);
    }
    }


Blink without delay (extended):

.. code-block:: c

    // These variables store the flash pattern
    // and the current state of the LED

    int ledPin =  13;      // the number of the LED pin
    int ledState = LOW;             // ledState used to set the LED
    unsigned long previousMillis = 0;        // will store last time LED was updated
    long OnTime = 250;           // milliseconds of on-time
    long OffTime = 750;          // milliseconds of off-time

    void setup() 
    {
    // set the digital pin as output:
    pinMode(ledPin, OUTPUT);      
    }

    void loop()
    {
    // check to see if it's time to change the state of the LED
    unsigned long currentMillis = millis();
    
    if((ledState == HIGH) && (currentMillis - previousMillis >= OnTime))
    {
        ledState = LOW;  // Turn it off
        previousMillis = currentMillis;  // Remember the time
        digitalWrite(ledPin, ledState);  // Update the actual LED
    }
    else if ((ledState == LOW) && (currentMillis - previousMillis >= OffTime))
    {
        ledState = HIGH;  // turn it on
        previousMillis = currentMillis;   // Remember the time
        digitalWrite(ledPin, ledState);	  // Update the actual LED
    }
    }


Summary
--------

**Properties TL;DR:**

- Interrupt Service Routine function (ISR) must be as short as possible.

- Delay () function doesnâ€™t work inside ISR and should be avoided.

- No input no output

- No serial. (if you have to, then maybe Serial.print())

- delayMicroseconds() works 1-2

.. code-block:: c

    void myDelay(int x)   {
        for(int i=0; i<=x; i++)   
        {
            delayMicroseconds(1000);
        }
    }

- variables must be volatile

- Sometimes need to disable interrupts:

.. code-block:: c

    noInterrupts ();
    long myCounter = isrCounter;  // get value set by ISR
    interrupts ();



The most basic code:

.. code-block:: c

    const byte ledPin = 13;
    const byte interruptPin = 2;
    volatile byte state = LOW;

    void setup() {
    pinMode(ledPin, OUTPUT);
    pinMode(interruptPin, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(interruptPin), blink, CHANGE);
    }

    void loop() {
    digitalWrite(ledPin, state);
    }

    void blink() {
    state = !state;
    }


Or modify:

.. code-block:: c

    const byte ledPin = 13;
    const byte interruptPin = 2;
    volatile byte state = LOW;

    void setup() {
    pinMode(ledPin, OUTPUT);
    pinMode(interruptPin, INPUT_PULLUP);
    attachInterrupt(digitalPinToInterrupt(interruptPin), blink, CHANGE);
    }

    void loop() {
    delay(1000);
    }

    void blink() {
    state = !state;
    digitalWrite(ledPin, state);
    }





.. rubric:: References
.. [#f1] Izmir Institute of Technology - Department of Electrical and Electronics Engineering *EE443 - Embedded Systems lecture notes - 2013*
.. [#f2] https://www.tutorialspoint.com/embedded_systems/es_timer_counter.htm
.. [#f3] https://www.robotshop.com/community/forum/t/arduino-101-timers-and-interrupts/13072

